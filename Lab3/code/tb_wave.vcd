$date
	Fri May 17 17:03:05 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module TestBench $end
$scope module CPU $end
$var wire 1 ! clk_i $end
$var wire 1 " jump $end
$var wire 1 # rst_i $end
$var wire 32 $ reg_rt [31:0] $end
$var wire 32 % reg_rs [31:0] $end
$var wire 5 & reg_dst [4:0] $end
$var wire 32 ' pc_se_sl2_PLUS_pc_4 [31:0] $end
$var wire 32 ( pc_se_sl2 [31:0] $end
$var wire 32 ) pc_se [31:0] $end
$var wire 32 * pc_output [31:0] $end
$var wire 32 + pc_instr [31:0] $end
$var wire 32 , pc_input [31:0] $end
$var wire 32 - pc_address_without_jump [31:0] $end
$var wire 32 . pc_4 [31:0] $end
$var wire 32 / mem_res_lw [31:0] $end
$var wire 32 0 lower_jump [31:0] $end
$var wire 32 1 jump_whole [31:0] $end
$var wire 32 2 j_jal [31:0] $end
$var wire 32 3 final_RDdata [31:0] $end
$var wire 5 4 final_RDaddr [4:0] $end
$var wire 1 5 branch_res $end
$var wire 1 6 alu_zero $end
$var wire 32 7 alu_src2 [31:0] $end
$var wire 32 8 alu_src1 [31:0] $end
$var wire 32 9 alu_result [31:0] $end
$var wire 4 : alu_ctrl [3:0] $end
$var wire 1 ; RegWrite $end
$var wire 1 < RegDst $end
$var wire 32 = RDdata_without_lw [31:0] $end
$var wire 1 > MemtoReg $end
$var wire 1 ? MemWrite $end
$var wire 1 @ MemRead $end
$var wire 1 A Jump $end
$var wire 1 B Branch $end
$var wire 1 C ALUSrc $end
$var wire 3 D ALUOp [2:0] $end
$scope module AC $end
$var wire 6 E funct_i [5:0] $end
$var wire 3 F ALUOp_i [2:0] $end
$var reg 4 G ALUCtrl_o [3:0] $end
$upscope $end
$scope module ALU $end
$var wire 4 H ctrl_i [3:0] $end
$var wire 1 6 zero_o $end
$var wire 32 I src2_i [31:0] $end
$var wire 32 J src1_i [31:0] $end
$var reg 32 K result_o [31:0] $end
$upscope $end
$scope module Adder1 $end
$var wire 32 L src2_i [31:0] $end
$var wire 32 M sum_o [31:0] $end
$var wire 32 N src1_i [31:0] $end
$upscope $end
$scope module Adder2 $end
$var wire 32 O src1_i [31:0] $end
$var wire 32 P sum_o [31:0] $end
$var wire 32 Q src2_i [31:0] $end
$upscope $end
$scope module Data_Memory $end
$var wire 32 R addr_i [31:0] $end
$var wire 1 ! clk_i $end
$var wire 32 S data_i [31:0] $end
$var wire 1 ? MemWrite_i $end
$var wire 1 @ MemRead_i $end
$var reg 32 T data_o [31:0] $end
$var integer 32 U i [31:0] $end
$upscope $end
$scope module Decoder $end
$var wire 6 V func_code_i [5:0] $end
$var wire 6 W instr_op_i [5:0] $end
$var reg 1 C ALUSrc_o $end
$var reg 3 X ALU_op_o [2:0] $end
$var reg 1 B Branch_o $end
$var reg 1 A Jump_o $end
$var reg 1 @ MemRead_o $end
$var reg 1 ? MemWrite_o $end
$var reg 1 > MemtoReg_o $end
$var reg 1 < RegDst_o $end
$var reg 1 ; RegWrite_o $end
$upscope $end
$scope module IM $end
$var wire 32 Y instr_o [31:0] $end
$var wire 32 Z addr_i [31:0] $end
$var integer 32 [ i [31:0] $end
$upscope $end
$scope module Mux_ALUSrc $end
$var wire 1 C select_i $end
$var wire 32 \ data_o [31:0] $end
$var wire 32 ] data1_i [31:0] $end
$var wire 32 ^ data0_i [31:0] $end
$upscope $end
$scope module Mux_PC_Source $end
$var wire 32 _ data0_i [31:0] $end
$var wire 32 ` data1_i [31:0] $end
$var wire 1 a select_i $end
$var wire 32 b data_o [31:0] $end
$upscope $end
$scope module Mux_Write_Reg $end
$var wire 5 c data0_i [4:0] $end
$var wire 5 d data1_i [4:0] $end
$var wire 1 < select_i $end
$var wire 5 e data_o [4:0] $end
$upscope $end
$scope module Mux_if_sra $end
$var wire 32 f data1_i [31:0] $end
$var wire 1 g select_i $end
$var wire 32 h data_o [31:0] $end
$var wire 32 i data0_i [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk_i $end
$var wire 1 # rst_i $end
$var wire 32 j pc_in_i [31:0] $end
$var reg 32 k pc_out_o [31:0] $end
$upscope $end
$scope module PC_Jump $end
$var wire 32 l data0_i [31:0] $end
$var wire 1 m select_i $end
$var wire 32 n data_o [31:0] $end
$var wire 32 o data1_i [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 p RSaddr_i [4:0] $end
$var wire 32 q RSdata_o [31:0] $end
$var wire 5 r RTaddr_i [4:0] $end
$var wire 32 s RTdata_o [31:0] $end
$var wire 1 ; RegWrite_i $end
$var wire 1 ! clk_i $end
$var wire 1 # rst_i $end
$var wire 32 t RDdata_i [31:0] $end
$var wire 5 u RDaddr_i [4:0] $end
$upscope $end
$scope module SE $end
$var wire 3 v ALUOp_i [2:0] $end
$var wire 16 w data_i [15:0] $end
$var wire 6 x funct_i [5:0] $end
$var wire 6 y op_i [5:0] $end
$var reg 32 z data_o [31:0] $end
$upscope $end
$scope module Shifter $end
$var wire 32 { data_i [31:0] $end
$var wire 32 | data_o [31:0] $end
$upscope $end
$scope module get_RDdata_without_lw $end
$var wire 32 } data0_i [31:0] $end
$var wire 32 ~ data1_i [31:0] $end
$var wire 1 !" select_i $end
$var wire 32 "" data_o [31:0] $end
$upscope $end
$scope module get_branch_res $end
$var wire 6 #" instr_op_i [5:0] $end
$var wire 32 $" src1_i [31:0] $end
$var wire 32 %" src2_i [31:0] $end
$var reg 1 5 branch_res_o $end
$upscope $end
$scope module get_final_RDaddr $end
$var wire 5 &" data0_i [4:0] $end
$var wire 5 '" data1_i [4:0] $end
$var wire 1 (" select_i $end
$var wire 5 )" data_o [4:0] $end
$upscope $end
$scope module get_final_RDdata $end
$var wire 32 *" data0_i [31:0] $end
$var wire 32 +" data1_i [31:0] $end
$var wire 1 > select_i $end
$var wire 32 ," data_o [31:0] $end
$upscope $end
$scope module get_jump_lower $end
$var wire 32 -" data_i [31:0] $end
$var wire 32 ." data_o [31:0] $end
$upscope $end
$scope module get_jump_whole $end
$var wire 32 /" data0_i [31:0] $end
$var wire 32 0" data1_i [31:0] $end
$var wire 1 " select_i $end
$var wire 32 1" data_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 1"
bx00 0"
bx /"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 ."
b0xxxxxxxxxxxxxxxxxxxxxxxxxx -"
bx ,"
bx +"
bx *"
bx )"
x("
b11111 '"
bx &"
bx %"
bx $"
bx #"
bx ""
x!"
bx ~
bx }
bx00 |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
xm
bx l
bx k
bx j
bx i
bx h
xg
b0xxxxx f
bx e
bx d
bx c
bx b
xa
bx `
bx _
bx ^
bx ]
bx \
b100000 [
bx Z
bx Y
bx X
bx W
bx V
b10000000 U
bx T
bx S
bx R
bx00 Q
bx P
bx O
bx N
bx M
b100 L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
xC
xB
xA
x@
x?
x>
bx =
x<
x;
bx :
bx 9
bx 8
bx 7
x6
x5
bx 4
bx 3
bx00 2
bx 1
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx00 (
bx '
bx &
bx %
bx $
0#
z"
0!
$end
#25000
b0x0000000000x000000000000000x00 ,
b0x0000000000x000000000000000x00 j
b0x0000000000x000000000000000x00 n
06
b0x0x =
b0x0x ""
b1 3
b1 t
b1 ,"
b100 -
b100 b
b100 l
b1 9
b1 K
b1 R
b1 }
b1 *"
bx1 4
bx1 u
bx1 )"
b1000 '
b1000 P
b1000 `
b100 (
b100 Q
b100 |
0a
b1 7
b1 I
b1 \
b1 %"
b1000000000000000100 0
b1000000000000000100 ."
b1 )
b1 ]
b1 z
b1 {
b10 :
b10 G
b10 H
b0 D
b0 F
b0 X
b0 v
0>
0?
0@
0A
0B
1;
1C
0<
b0 8
b0 J
b0 h
b0 $"
b1 &
b1 e
b1 &"
b0x0000000000x000000000000000x00 1
b0x0000000000x000000000000000x00 o
b0x0000000000x000000000000000x00 1"
b1000 #"
b10000000000000001 -"
0g
b0 f
b1 x
b1000 y
b1 w
b1 E
b1 V
b1000 W
b0 $
b0 S
b0 ^
b0 s
b1 r
b0 %
b0 i
b0 q
b0 /"
b0 p
b0 d
b1 c
b100000000001000000000000000100 2
b100000000001000000000000000100 0"
b100000000000010000000000000001 +
b100000000000010000000000000001 Y
b100 .
b100 M
b100 O
b100 _
b100 ~
b0 *
b0 N
b0 Z
b0 k
1!
#50000
0!
1#
#75000
x6
bx 3
bx t
bx ,"
bx00 (
bx00 Q
bx00 |
bx 7
bx I
bx \
bx %"
bx 9
bx K
bx R
bx }
bx *"
bx 4
bx u
bx )"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 0
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 ."
bx )
bx ]
bx z
bx {
bx 8
bx J
bx h
bx $"
bx &
bx e
bx &"
bx 1
bx o
bx 1"
bx ,
bx j
bx n
bx #"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx -"
xg
b0xxxxx f
bx x
bx y
bx w
bx E
bx V
bx W
bx $
bx S
bx ^
bx s
bx r
bx %
bx i
bx q
bx /"
bx p
bx d
bx c
bx00 2
bx00 0"
bx -
bx b
bx l
bx =
bx ""
bx +
bx Y
bx '
bx P
bx `
bx .
bx M
bx O
bx _
bx ~
b0x0000000000x000000000000000x00 *
b0x0000000000x000000000000000x00 N
b0x0000000000x000000000000000x00 Z
b0x0000000000x000000000000000x00 k
1!
#100000
0!
#125000
bx *
bx N
bx Z
bx k
1!
#150000
0!
#175000
1!
#200000
0!
#225000
1!
#250000
0!
#275000
1!
#300000
0!
#325000
1!
#350000
0!
#375000
1!
#400000
0!
#425000
1!
#450000
0!
#475000
1!
#500000
0!
#525000
1!
#550000
0!
#575000
1!
#600000
0!
#625000
1!
#650000
0!
#675000
1!
#700000
0!
#725000
1!
#750000
0!
#775000
1!
#800000
0!
#825000
1!
#850000
0!
#875000
1!
#900000
0!
#925000
1!
#950000
0!
#975000
1!
#1000000
0!
#1025000
1!
#1050000
0!
#1075000
1!
#1100000
0!
#1125000
1!
#1150000
0!
#1175000
1!
#1200000
0!
#1225000
1!
#1250000
0!
#1275000
1!
#1300000
0!
#1325000
1!
#1350000
0!
#1375000
1!
#1400000
0!
#1425000
1!
#1450000
0!
#1475000
1!
#1500000
0!
#1525000
1!
#1550000
0!
#1575000
1!
#1600000
0!
#1625000
1!
#1650000
0!
#1675000
1!
#1700000
0!
#1725000
1!
#1750000
0!
#1775000
1!
#1800000
0!
#1825000
1!
#1850000
0!
#1875000
1!
#1900000
0!
#1925000
1!
#1950000
0!
#1975000
1!
#2000000
0!
#2025000
1!
#2050000
0!
#2075000
1!
#2100000
0!
#2125000
1!
#2150000
0!
#2175000
1!
#2200000
0!
#2225000
1!
#2250000
0!
#2275000
1!
#2300000
0!
#2325000
1!
#2350000
0!
#2375000
1!
#2400000
0!
#2425000
1!
#2450000
0!
#2475000
1!
#2500000
0!
#2525000
1!
#2550000
0!
#2575000
1!
#2600000
0!
#2625000
1!
#2650000
0!
#2675000
1!
#2700000
0!
#2725000
1!
#2750000
0!
#2775000
1!
#2800000
0!
#2825000
1!
#2850000
0!
#2875000
1!
#2900000
0!
#2925000
1!
#2950000
0!
#2975000
1!
#3000000
0!
#3025000
1!
#3050000
0!
#3075000
1!
#3100000
0!
#3125000
1!
#3150000
0!
#3175000
1!
#3200000
0!
#3225000
1!
#3250000
0!
#3275000
1!
#3300000
0!
#3325000
1!
#3350000
0!
#3375000
1!
#3400000
0!
#3425000
1!
#3450000
0!
#3475000
1!
#3500000
0!
#3525000
1!
#3550000
0!
#3575000
1!
#3600000
0!
#3625000
1!
#3650000
0!
#3675000
1!
#3700000
0!
#3725000
1!
#3750000
0!
#3775000
1!
#3800000
0!
#3825000
1!
#3850000
0!
#3875000
1!
#3900000
0!
#3925000
1!
#3950000
0!
#3975000
1!
#4000000
0!
#4025000
1!
#4050000
0!
#4075000
1!
#4100000
0!
#4125000
1!
#4150000
0!
#4175000
1!
#4200000
0!
#4225000
1!
#4250000
0!
#4275000
1!
#4300000
0!
#4325000
1!
#4350000
0!
#4375000
1!
#4400000
0!
#4425000
1!
#4450000
0!
#4475000
1!
#4500000
0!
#4525000
1!
#4550000
0!
#4575000
1!
#4600000
0!
#4625000
1!
#4650000
0!
#4675000
1!
#4700000
0!
#4725000
1!
#4750000
0!
#4775000
1!
#4800000
0!
#4825000
1!
#4850000
0!
#4875000
1!
#4900000
0!
#4925000
1!
#4950000
0!
#4975000
1!
#5000000
0!
#5025000
1!
#5050000
0!
